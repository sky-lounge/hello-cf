---
name: Development
on:
  push:
    branches:
    - main
    paths:
    - cf/dev-manifest.yml
    - skylounge/integration-test.yml
    - src
    ignore_paths:
    - .github/development-version.txt
    - .github/production-version.txt
  workflow_dispatch: null
jobs:
  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout branch
      uses: actions/checkout@v3
    - name: Unit test
      run: |
        if [ ! -f "src/nginx.conf" ]; then
            echo "Missing nginx.conf"
            exit 1
        fi
  deploy:
    needs:
    - unit-test
    name: Deploy to development space
    runs-on: ubuntu-latest
    outputs:
      route: "${{ steps.deploy.outputs.route }}"
    steps:
    - name: Checkout branch
      uses: actions/checkout@v3
    - name: Extract Manifest values
      id: manifest
      uses: pietrobolcato/action-read-yaml@1.1.0
      with:
        config: "${{ github.workspace }}/${{ env.MANIFEST }}"
      env:
        MANIFEST: cf/dev-manifest.yml
    - name: Install Cloud Foundry CLI
      run: |
        mkdir cf-cli
        cd cf-cli
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v8&source=github" | tar -zx
        rm cf
        mv cf8 cf
        chmod +x cf
    - name: Deploy
      id: deploy
      run: |
        cf-cli/cf api $API
        cf-cli/cf auth
        cf-cli/cf target -o $ORG -s $SPACE
        cf-cli/cf push -f $MANIFEST --strategy rolling
        app_name=${{ steps.manifest.outputs['applications.0.name'] }}
        cf-cli/cf set-label app $app_name "commit=${{ github.sha }}"
        route=${{ steps.manifest.outputs['applications.0.routes.0.route'] }}
        echo "route=${route}" >> $GITHUB_OUTPUTS
      env:
        API: https://api.de.a9s.eu
        CF_USERNAME: "${{ secrets.CF_DEV_USERNAME }}"
        CF_PASSWORD: "${{ secrets.CF_DEV_PASSWORD }}"
        ORG: sgreenberg_rscale_io
        SPACE: runner
        MANIFEST: cf/dev-manifest.yml
  integration-test:
    needs:
    - deploy
    name: Integration Test
    runs-on: ubuntu-latest
    steps:
    - name: Verify index page
      run: |
        set -ex
        status_code=$(curl -L -o /dev/null -s -w "%{http_code}" https://${ROUTE})
        [[ 200 -eq $status_code ]] || (echo "CURL FAILED to return 200 status" && exit 1)
        response=$(curl -L https://${ROUTE})
        [[ $response == *"Better Automation for Software Organizations"* ]] || (echo "CURL FAILED to return result containing substring: Better Automation for Software Organizations" && exit 1)
      env:
        ROUTE: "${{ needs.deploy.outputs.route }}"
  owasp-zap-full-scan:
    needs:
    - deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - name: Run OWASP Zap full scan
      uses: zaproxy/action-full-scan@v0.4.0
      id: scan
      with:
        target: "https://${{ env.ROUTE }}"
        rules_file_name: skylounge/owasp/rules.cfg
        issue_title: "OWASP Full Scan - ${{ github.run_number }}"
        token: "${{ github.token }}"
        fail_action: true
      env:
        ROUTE: "${{needs.deploy.outputs.route}}"
  deployed-version:
    needs:
    - integration-test
    - owasp-zap-full-scan
    name: Update deployed version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout branch
      uses: actions/checkout@v3
    - name: Update Artifact Version
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "service-account@cloud.gov"
        echo "${{ github.sha }}" > .github/development-version.txt
        git add .github/development-version.txt
        git commit -m "update development version: ${{ github.sha }}"
        git pull --rebase
        git push
